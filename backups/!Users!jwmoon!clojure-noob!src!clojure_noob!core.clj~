(ns clojure-noob.core
  (:gen-class))

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (println "I'm a little tea pot!"))


(concat (take 8 (repeat "na")) ["Batman!"])
(concat (take 8 (repeat "no")) ["hoola!"])


(take 3 (repeatedly (fn [] (rand-int 10))))
(take 4 (repeatedly (fn [] (rand-int 10))))

(defn even-numbers
  ([] (even-numbers 0))
  ([n] (cons n (lazy-seq (even-numbers (+ n 2))))))

(defn even-numbers
  ([] (even-numbers 0))
  ([n] (cons n (lazy-seq (even-numbers (+ n 2))))))


;(do even-numbers (10))
(even-numbers 10)

(take 10 (even-numbers))

(take 2.19 (even-numbers))

(into [] (map identity {:sunlight-reaction "Glitter!"}))


(into ["cherry"] '("pine" "spruce"))

; [1] 이 마치 벡터 파라메터처럼 들어간다. 
(conj [0] [1])


(conj {:time "midnight"} [:place "my place"])

(max 0 1 2)

; this is not work
(max [0 1 2])

(apply max [0 1 2])

(defn my-into
  [target additions]
  (apply conj target additions))

(my-into [0] [1 2 3])

(def add10 (partial + 10))
(add10 3)
(add10 5)

(def add-missing-elements
  (partial conj ["water" "earch" "air"]))

(add-missing-elements "unobainium" "adamantium")

(if false
  "By Zeus's hammer!"
  )

(if true
  (do(println "Success!!") (println "hello") "hey~" "ho"))

()

