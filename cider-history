;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(total-scores3 (sort names))" "(total-scores2 (sort names))" "(name-score-of \"ZEUS\")" "(name-score-of \"LANSLOT\")" "(name-score-of \"BOB\")" "(name-score-of \"ATHOR\")" "(name-score-of \"ALICE\")" "(get names 1)" "names [0]" "(slurp \"/Users/jwmoon/names.txt\")" "(slurp \"~/names.txt\")" "(total-scores (sort names))" "(score-of \"COLIN\")" "(score-of \"ALICE\")" "(score-of \"ABC\")" "(index-of \"B\")" "(.indexOf alphabets \"A\")" "(.indexof alphabets \"A\")" "(get alphabets \"A\")" "(get alphabets \"\")" "(get alphabets \"A\")" "'alphabets" "alphabets" "alphabest" "(sum-each-numbers (factorial 100))" "(sum-each-numbers 1234)" "(sum-each-number 1234)" "(sum-each)" "(sum-number-char 1234)" "(split-num 1234)" "(map + [1 4 5])" "(map + (1 4 5))" "(sum-number-char 145)" "(map read-string [\"1\" \"2\"])" "(read-string \"2\")" "(number \"2\")" "(+ \"1\" \"2\")" "(str/split \"s12\" #\"¥d+\")" "(str/split \"s12\" #\"d+\")" "(str/split \"s12\" #\"¥d+\")" "(sum-number-char 145)" "(sum-number-char2 145)" "(sum-number-char 145)" "(clojure.string/split \"ab12\" #\"\")" "(str/split \"ab12\" #\"\")" "(str/split \"ab12\" #\".\")" "(str/split \"adc\" #\"\\d+\")" "(str/split \"14\" #\"\\d+\")" "(str/split (str 14) #\"\\d+\")" "(require '[clojure.string :as str])" "(str 14)" "(str/split (str 14) #\"\\d+\")" "(str/split (str 14) #\"¥d+\")" "[(str 14)]" "(str 14)" "(string 14)" "([1234])" "(map 1234)" "(1234)" "(factorial 100)" "(factorial 4)" "(factorial 3)" "(= 1 1)" "(factorial 2)" "q" "diiee" "dkdkd" " " "sksks" "ll" "nn" "(future (Thread/slepp 4000))" "#(apply criticize-code [\"hey\"])" "#(1 3)" "\"The single\"" "'the 'singe" "'Teh single" "'+" "(quote +)" "(+ 1 2)" "'(+ 1 2)" "(quote (+ 1 2))")